--  ███████╗████████╗██████╗ ██╗   ██╗ ██████╗████████╗██╗   ██╗██████╗ ███████╗
--  ██╔════╝╚══██╔══╝██╔══██╗██║   ██║██╔════╝╚══██╔══╝██║   ██║██╔══██╗██╔════╝
--  ███████╗   ██║   ██████╔╝██║   ██║██║        ██║   ██║   ██║██████╔╝█████╗
--  ╚════██║   ██║   ██╔══██╗██║   ██║██║        ██║   ██║   ██║██╔══██╗██╔══╝
--  ███████║   ██║   ██║  ██║╚██████╔╝╚██████╗   ██║   ╚██████╔╝██║  ██║███████╗
--  ╚══════╝   ╚═╝   ╚═╝  ╚═╝ ╚═════╝  ╚═════╝   ╚═╝    ╚═════╝ ╚═╝  ╚═╝╚══════╝


create sequence revision_seq start with 1 increment by 50;

create table appointments
(
    client_id              bigint,
    created_at             timestamp(6) not null,
    employee_id            bigint,
    end_appointment_date   timestamp(6) not null,
    id                     bigint generated by default as identity,
    pet_id                 bigint,
    start_appointment_date timestamp(6) not null,
    updated_at             timestamp(6),
    guest_client_phone     varchar(15),
    guest_client_email     varchar(100),
    guest_client_name      varchar(100),
    reason                 varchar(500),
    notes                  varchar(1000),
    breed                  varchar(255),
    created_by             varchar(255),
    guest_client_pet_type  varchar(255) check (guest_client_pet_type in
                                               ('PERRO', 'GATO', 'AVE', 'CONEJO', 'HAMSTER', 'REPTIL', 'OTRO')),
    offering_type          varchar(255) not null check (offering_type in ('CONSULTATION', 'VACCINATION', 'GROOMING', 'MEDICAL')),
    status                 varchar(255) not null check (status in
                                                        ('PROGRAMADA', 'EN_PROGRESO', 'COMPLETADA', 'CANCELADA',
                                                         'NO_ASISTIO')),
    updated_by             varchar(255),
    primary key (id)
);

create table appointments_log
(
    assigned_employee_mod      boolean,
    client_mod                 boolean,
    created_at_mod             boolean,
    created_by_mod             boolean,
    end_appointment_date_mod   boolean,
    guest_client_info_mod      boolean,
    notes_mod                  boolean,
    offering_type_mod          boolean,
    pet_mod                    boolean,
    reason_mod                 boolean,
    rev                        integer not null,
    revtype                    smallint,
    start_appointment_date_mod boolean,
    status_mod                 boolean,
    updated_at_mod             boolean,
    updated_by_mod             boolean,
    client_id                  bigint,
    created_at                 timestamp(6),
    employee_id                bigint,
    end_appointment_date       timestamp(6),
    id                         bigint  not null,
    pet_id                     bigint,
    start_appointment_date     timestamp(6),
    updated_at                 timestamp(6),
    reason                     varchar(500),
    notes                      varchar(1000),
    breed                      varchar(255),
    created_by                 varchar(255),
    guest_client_email         varchar(255),
    guest_client_name          varchar(255),
    guest_client_pet_type      varchar(255) check (guest_client_pet_type in
                                                   ('PERRO', 'GATO', 'AVE', 'CONEJO', 'HAMSTER', 'REPTIL', 'OTRO')),
    guest_client_phone         varchar(255),
    offering_type              varchar(255) check (offering_type in ('CONSULTATION', 'VACCINATION', 'GROOMING', 'MEDICAL')),
    status                     varchar(255) check (status in ('PROGRAMADA', 'EN_PROGRESO', 'COMPLETADA', 'CANCELADA',
                                                              'NO_ASISTIO')),
    updated_by                 varchar(255),
    primary key (rev, id)
);

create table client
(
    credit_limit             float(53),
    current_balance          float(53),
    payment_terms_days       integer,
    verified                 boolean,
    client_id                bigint not null,
    passport                 varchar(9),
    cedula                   varchar(11),
    rnc                      varchar(11),
    notes                    varchar(500),
    company_name             varchar(255),
    emergency_contact_name   varchar(255),
    emergency_contact_number varchar(255),
    preferred_contact_method varchar(255) check (preferred_contact_method in ('WHATSAPP', 'SMS', 'EMAIL', 'PHONE_CALL')),
    rating                   varchar(255) check (rating in
                                                 ('MUY_BUENO', 'BUENO', 'REGULAR', 'PAGO_TARDIO', 'CONFLICTIVO')),
    reference_source         varchar(255) check (reference_source in
                                                 ('REFERIDO_CLIENTE', 'REDES_SOCIALES', 'PUBLICIDAD', 'GOOGLE',
                                                  'PASANTE', 'RECOMENDACION_PROFESIONAL', 'OTRO')),
    primary key (client_id),
    unique (cedula),
    unique (passport),
    unique (rnc)
);

create table client_log
(
    cedula_mod                   boolean,
    company_name_mod             boolean,
    credit_limit                 float(53),
    credit_limit_mod             boolean,
    current_balance              float(53),
    current_balance_mod          boolean,
    emergency_contact_name_mod   boolean,
    emergency_contact_number_mod boolean,
    notes_mod                    boolean,
    passport_mod                 boolean,
    payment_terms_days           integer,
    payment_terms_days_mod       boolean,
    preferred_contact_method_mod boolean,
    rating_mod                   boolean,
    reference_source_mod         boolean,
    rev                          integer not null,
    rnc_mod                      boolean,
    verified                     boolean,
    verified_mod                 boolean,
    client_id                    bigint  not null,
    passport                     varchar(9),
    cedula                       varchar(11),
    rnc                          varchar(11),
    notes                        varchar(500),
    company_name                 varchar(255),
    emergency_contact_name       varchar(255),
    emergency_contact_number     varchar(255),
    preferred_contact_method     varchar(255) check (preferred_contact_method in ('WHATSAPP', 'SMS', 'EMAIL', 'PHONE_CALL')),
    rating                       varchar(255) check (rating in
                                                     ('MUY_BUENO', 'BUENO', 'REGULAR', 'PAGO_TARDIO', 'CONFLICTIVO')),
    reference_source             varchar(255) check (reference_source in
                                                     ('REFERIDO_CLIENTE', 'REDES_SOCIALES', 'PUBLICIDAD', 'GOOGLE',
                                                      'PASANTE', 'RECOMENDACION_PROFESIONAL', 'OTRO')),
    primary key (rev, client_id)
);

create table consultations
(
    active            boolean      not null,
    consultation_date timestamp(6) not null,
    created_at        timestamp(6),
    id                bigint generated by default as identity,
    medical_history   bigint,
    pet               bigint       not null,
    updated_at        timestamp(6),
    veterinarian      bigint       not null,
    diagnosis         TEXT,
    notes             TEXT         not null,
    prescription      TEXT,
    treatment         TEXT,
    primary key (id)
);

create table consultations_log
(
    active                boolean,
    active_mod            boolean,
    consultation_date_mod boolean,
    created_at_mod        boolean,
    diagnosis_mod         boolean,
    medical_history_mod   boolean,
    notes_mod             boolean,
    pet_mod               boolean,
    prescription_mod      boolean,
    rev                   integer not null,
    revtype               smallint,
    treatment_mod         boolean,
    updated_at_mod        boolean,
    veterinarian_mod      boolean,
    consultation_date     timestamp(6),
    created_at            timestamp(6),
    id                    bigint  not null,
    medical_history       bigint,
    pet                   bigint,
    updated_at            timestamp(6),
    veterinarian          bigint,
    diagnosis             TEXT,
    notes                 TEXT,
    prescription          TEXT,
    treatment             TEXT,
    primary key (rev, id)
);

create table employee
(
    available               boolean,
    hire_date               date   not null,
    salary                  float(53),
    employee_id             bigint not null,
    emergency_contact_name  varchar(255),
    emergency_contact_phone varchar(255),
    employee_role           varchar(255) check (employee_role in
                                                ('CLINIC_MANAGER', 'RECEPTIONIST', 'ADMINISTRATIVE', 'VETERINARIAN',
                                                 'GROOMER', 'KENNEL_ASSISTANT', 'LAB_TECHNICIAN')),
    gender                  varchar(255) check (gender in ('MASCULINO', 'FEMENINO', 'OTRO')),
    primary key (employee_id)
);

create table employee_log
(
    available                   boolean,
    available_mod               boolean,
    emergency_contact_name_mod  boolean,
    emergency_contact_phone_mod boolean,
    employee_role_mod           boolean,
    gender_mod                  boolean,
    hire_date                   date,
    hire_date_mod               boolean,
    rev                         integer not null,
    salary                      float(53),
    salary_mod                  boolean,
    employee_id                 bigint  not null,
    emergency_contact_name      varchar(255),
    emergency_contact_phone     varchar(255),
    employee_role               varchar(255) check (employee_role in
                                                    ('CLINIC_MANAGER', 'RECEPTIONIST', 'ADMINISTRATIVE', 'VETERINARIAN',
                                                     'GROOMER', 'KENNEL_ASSISTANT', 'LAB_TECHNICIAN')),
    gender                      varchar(255) check (gender in ('MASCULINO', 'FEMENINO', 'OTRO')),
    primary key (rev, employee_id)
);

create table employee_work_schedule
(
    end_time    time(6),
    is_off_day  boolean,
    start_time  time(6),
    employee_id bigint not null,
    day_of_week varchar(255) check (day_of_week in
                                    ('MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY'))
);

create table grooming_sessions
(
    active        boolean      not null,
    created_at    timestamp(6),
    groomer       bigint       not null,
    grooming_date timestamp(6) not null,
    id            bigint generated by default as identity,
    pet           bigint       not null,
    updated_at    timestamp(6),
    notes         TEXT         not null,
    primary key (id)
);

create table grooming_sessions_log
(
    active            boolean,
    active_mod        boolean,
    created_at_mod    boolean,
    groomer_mod       boolean,
    grooming_date_mod boolean,
    notes_mod         boolean,
    pet_mod           boolean,
    rev               integer not null,
    revtype           smallint,
    updated_at_mod    boolean,
    created_at        timestamp(6),
    groomer           bigint,
    grooming_date     timestamp(6),
    id                bigint  not null,
    pet               bigint,
    updated_at        timestamp(6),
    notes             TEXT,
    primary key (rev, id)
);

create table invoice_offerings
(
    amount   numeric(10, 2) not null,
    quantity float(53)      not null,
    id       bigint generated by default as identity,
    invoice  bigint         not null,
    offering bigint         not null,
    primary key (id)
);

create table invoice_offerings_log
(
    amount       numeric(10, 2),
    amount_mod   boolean,
    invoice_mod  boolean,
    offering_mod boolean,
    quantity     float(53),
    quantity_mod boolean,
    rev          integer not null,
    revtype      smallint,
    id           bigint  not null,
    invoice      bigint,
    offering     bigint,
    primary key (rev, id)
);

create table invoice_product
(
    amount             numeric(38, 2)              not null,
    price              numeric(38, 2)              not null,
    quantity           float(53)                   not null,
    code               bigint generated by default as identity,
    created_date       timestamp(6) with time zone not null,
    invoice            bigint                      not null,
    last_modified_date timestamp(6) with time zone not null,
    product            bigint                      not null,
    created_by         varchar(255)                not null,
    last_modified_by   varchar(255)                not null,
    primary key (code)
);

create table invoice_product_log
(
    amount       numeric(38, 2),
    amount_mod   boolean,
    invoice_mod  boolean,
    price        numeric(38, 2),
    price_mod    boolean,
    product_mod  boolean,
    quantity     float(53),
    quantity_mod boolean,
    rev          integer not null,
    revtype      smallint,
    code         bigint  not null,
    invoice      bigint,
    product      bigint,
    primary key (rev, code)
);

create table invoices
(
    active              boolean                     not null,
    discount            numeric(38, 2),
    discount_percentage numeric(38, 2),
    issued_date         date                        not null,
    paid_to_date        numeric(38, 2)              not null,
    payment_date        date                        not null,
    subtotal            numeric(38, 2)              not null,
    tax                 numeric(38, 2)              not null,
    total               numeric(38, 2)              not null,
    client              bigint                      not null,
    code                bigint generated by default as identity,
    consultation        bigint,
    created_date        timestamp(6) with time zone not null,
    last_modified_date  timestamp(6) with time zone not null,
    sales_order         varchar(100),
    notes               varchar(500),
    consultation_notes  varchar(1000),
    created_by          varchar(255)                not null,
    last_modified_by    varchar(255)                not null,
    status              varchar(255)                not null check (status in ('PARTIAL', 'OVERPAID', 'PENDING', 'PAID',
                                                                               'OVERDUE', 'DRAFT', 'UNSENT', 'SENT',
                                                                               'CANCELLED')),
    primary key (code)
);

create table invoices_log
(
    active                  boolean,
    active_mod              boolean,
    client_mod              boolean,
    consultation_mod        boolean,
    consultation_notes_mod  boolean,
    discount                numeric(38, 2),
    discount_mod            boolean,
    discount_percentage     numeric(38, 2),
    discount_percentage_mod boolean,
    issued_date             date,
    issued_date_mod         boolean,
    notes_mod               boolean,
    offerings_mod           boolean,
    paid_to_date            numeric(38, 2),
    paid_to_date_mod        boolean,
    payment_date            date,
    payment_date_mod        boolean,
    payment_details_mod     boolean,
    products_mod            boolean,
    rev                     integer not null,
    revtype                 smallint,
    sales_order_mod         boolean,
    status_mod              boolean,
    subtotal                numeric(38, 2),
    subtotal_mod            boolean,
    tax                     numeric(38, 2),
    tax_mod                 boolean,
    total                   numeric(38, 2),
    total_mod               boolean,
    client                  bigint,
    code                    bigint  not null,
    consultation            bigint,
    consultation_notes      varchar(1000),
    notes                   varchar(255),
    sales_order             varchar(255),
    status                  varchar(255) check (status in
                                                ('PARTIAL', 'OVERPAID', 'PENDING', 'PAID', 'OVERDUE', 'DRAFT', 'UNSENT',
                                                 'SENT', 'CANCELLED')),
    primary key (rev, code)
);

create table medical_histories
(
    active             boolean not null,
    created_at         timestamp(6),
    id                 bigint generated by default as identity,
    pet                bigint,
    updated_at         timestamp(6),
    allergies          TEXT,
    chronic_conditions TEXT,
    medications        TEXT,
    notes              TEXT,
    surgeries          TEXT,
    vaccinations       TEXT,
    primary key (id),
    unique (pet)
);

create table medical_histories_log
(
    active                 boolean,
    active_mod             boolean,
    allergies_mod          boolean,
    chronic_conditions_mod boolean,
    consultations_mod      boolean,
    created_at_mod         boolean,
    medications_mod        boolean,
    notes_mod              boolean,
    pet_mod                boolean,
    rev                    integer not null,
    revtype                smallint,
    surgeries_mod          boolean,
    updated_at_mod         boolean,
    vaccinations_mod       boolean,
    created_at             timestamp(6),
    id                     bigint  not null,
    pet                    bigint,
    updated_at             timestamp(6),
    allergies              TEXT,
    chronic_conditions     TEXT,
    medications            TEXT,
    notes                  TEXT,
    surgeries              TEXT,
    vaccinations           TEXT,
    primary key (rev, id)
);

create table offerings
(
    active        boolean        not null,
    price         numeric(10, 2) not null,
    created_at    timestamp(6),
    id            bigint generated by default as identity,
    updated_at    timestamp(6),
    description   TEXT,
    name          varchar(255)   not null,
    offering_type varchar(255)   not null check (offering_type in ('CONSULTATION', 'VACCINATION', 'GROOMING', 'MEDICAL')),
    primary key (id)
);

create table offerings_log
(
    active            boolean,
    active_mod        boolean,
    created_at_mod    boolean,
    description_mod   boolean,
    name_mod          boolean,
    offering_type_mod boolean,
    price             numeric(10, 2),
    price_mod         boolean,
    rev               integer not null,
    revtype           smallint,
    updated_at_mod    boolean,
    created_at        timestamp(6),
    id                bigint  not null,
    updated_at        timestamp(6),
    description       TEXT,
    name              varchar(255),
    offering_type     varchar(255) check (offering_type in ('CONSULTATION', 'VACCINATION', 'GROOMING', 'MEDICAL')),
    primary key (rev, id)
);

create table payments
(
    payment_date       date                        not null,
    total_amount       numeric(38, 2)              not null,
    code               bigint generated by default as identity,
    created_date       timestamp(6) with time zone not null,
    last_modified_date timestamp(6) with time zone not null,
    reference_number   varchar(250),
    notes              varchar(500),
    created_by         varchar(255)                not null,
    last_modified_by   varchar(255)                not null,
    method             varchar(255)                not null check (method in ('CASH', 'ELECTRONIC', 'TRANSFER')),
    status             varchar(255)                not null check (status in ('PENDING', 'SUCCESS', 'FAILED', 'REFUNDED')),
    primary key (code)
);

create table payments_detail
(
    amount             numeric(38, 2)              not null,
    code               bigint generated by default as identity,
    created_date       timestamp(6) with time zone not null,
    invoice            bigint                      not null,
    last_modified_date timestamp(6) with time zone not null,
    payment            bigint                      not null,
    created_by         varchar(255)                not null,
    last_modified_by   varchar(255)                not null,
    primary key (code)
);

create table payments_detail_log
(
    amount      numeric(38, 2),
    amount_mod  boolean,
    invoice_mod boolean,
    payment_mod boolean,
    rev         integer not null,
    revtype     smallint,
    code        bigint  not null,
    invoice     bigint,
    payment     bigint,
    primary key (rev, code)
);

create table payments_log
(
    details_mod          boolean,
    method_mod           boolean,
    notes_mod            boolean,
    payment_date         date,
    payment_date_mod     boolean,
    reference_number_mod boolean,
    rev                  integer not null,
    revtype              smallint,
    status_mod           boolean,
    total_amount         numeric(38, 2),
    total_amount_mod     boolean,
    code                 bigint  not null,
    method               varchar(255) check (method in ('CASH', 'ELECTRONIC', 'TRANSFER')),
    notes                varchar(255),
    reference_number     varchar(255),
    status               varchar(255) check (status in ('PENDING', 'SUCCESS', 'FAILED', 'REFUNDED')),
    primary key (rev, code)
);

create table pet_owners
(
    owners bigint not null,
    pet_id bigint not null
);

create table pet_owners_log
(
    rev     integer not null,
    revtype smallint,
    owners  bigint  not null,
    pet_id  bigint  not null,
    primary key (rev, owners, pet_id)
);

create table pets
(
    active     boolean not null,
    birth_date date,
    id         bigint generated by default as identity,
    breed      varchar(255),
    color      varchar(255),
    fur_type   varchar(255) check (fur_type in ('LARGO', 'CORTO', 'SIN_PELO')),
    gender     varchar(255) check (gender in ('MASCULINO', 'FEMENINO', 'OTRO')),
    name       varchar(255),
    size       varchar(255) check (size in ('PEQUEÑO', 'MEDIANO', 'GRANDE')),
    type       varchar(255) check (type in ('PERRO', 'GATO', 'AVE', 'CONEJO', 'HAMSTER', 'REPTIL', 'OTRO')),
    primary key (id)
);

create table pets_log
(
    active              boolean,
    active_mod          boolean,
    birth_date          date,
    birth_date_mod      boolean,
    breed_mod           boolean,
    color_mod           boolean,
    fur_type_mod        boolean,
    gender_mod          boolean,
    medical_history_mod boolean,
    name_mod            boolean,
    owners_mod          boolean,
    rev                 integer not null,
    revtype             smallint,
    size_mod            boolean,
    type_mod            boolean,
    id                  bigint  not null,
    breed               varchar(255),
    color               varchar(255),
    fur_type            varchar(255) check (fur_type in ('LARGO', 'CORTO', 'SIN_PELO')),
    gender              varchar(255) check (gender in ('MASCULINO', 'FEMENINO', 'OTRO')),
    name                varchar(255),
    size                varchar(255) check (size in ('PEQUEÑO', 'MEDIANO', 'GRANDE')),
    type                varchar(255) check (type in ('PERRO', 'GATO', 'AVE', 'CONEJO', 'HAMSTER', 'REPTIL', 'OTRO')),
    primary key (rev, id)
);

create table products
(
    accounting_stock integer        not null check (accounting_stock >= 0),
    active           boolean        not null,
    available_stock  integer        not null check (available_stock >= 0),
    purchase_price   numeric(10, 2) not null,
    reorder_level    integer        not null check (reorder_level >= 0),
    sales_price      numeric(10, 2) not null,
    product_id       bigint generated by default as identity,
    supplier         bigint,
    warehouse        bigint,
    category         varchar(255)   not null check (category in ('ALIMENTO', 'MEDICINA', 'ACCESORIO', 'HIGIENE', 'OTRO')),
    description      varchar(255),
    name             varchar(255)   not null,
    unit             varchar(255)   not null check (unit in ('UNIDAD', 'DOCENA', 'CAJA')),
    usage_type       varchar(255)   not null check (usage_type in ('PRIVADO', 'VENTA', 'AMBOS')),
    primary key (product_id)
);

create table products_log
(
    accounting_stock     integer,
    accounting_stock_mod boolean,
    active               boolean,
    active_mod           boolean,
    available_stock      integer,
    available_stock_mod  boolean,
    category_mod         boolean,
    description_mod      boolean,
    name_mod             boolean,
    purchase_price       numeric(10, 2),
    purchase_price_mod   boolean,
    reorder_level        integer,
    reorder_level_mod    boolean,
    rev                  integer not null,
    revtype              smallint,
    sales_price          numeric(10, 2),
    sales_price_mod      boolean,
    supplier_mod         boolean,
    unit_mod             boolean,
    usage_type_mod       boolean,
    warehouse_mod        boolean,
    product_id           bigint  not null,
    supplier             bigint,
    warehouse            bigint,
    category             varchar(255) check (category in ('ALIMENTO', 'MEDICINA', 'ACCESORIO', 'HIGIENE', 'OTRO')),
    description          varchar(255),
    name                 varchar(255),
    unit                 varchar(255) check (unit in ('UNIDAD', 'DOCENA', 'CAJA')),
    usage_type           varchar(255) check (usage_type in ('PRIVADO', 'VENTA', 'AMBOS')),
    primary key (rev, product_id)
);

create table revision
(
    id            integer not null,
    timestamp     bigint  not null,
    ip_address    varchar(255),
    modifier_user varchar(255),
    primary key (id)
);

create table suppliers
(
    active         boolean,
    supplier_id    bigint generated by default as identity,
    rnc            varchar(11)  not null,
    company_name   varchar(255) not null,
    contact_email  varchar(255),
    contact_person varchar(255),
    contact_phone  varchar(255),
    municipality   varchar(255) not null,
    province       varchar(255) not null,
    sector         varchar(255) not null,
    street_address varchar(255) not null,
    primary key (supplier_id),
    unique (rnc),
    unique (contact_email)
);

create table suppliers_log
(
    active             boolean,
    active_mod         boolean,
    company_name_mod   boolean,
    contact_email_mod  boolean,
    contact_person_mod boolean,
    contact_phone_mod  boolean,
    municipality_mod   boolean,
    products_mod       boolean,
    province_mod       boolean,
    rev                integer not null,
    revtype            smallint,
    rnc_mod            boolean,
    sector_mod         boolean,
    street_address_mod boolean,
    supplier_id        bigint  not null,
    rnc                varchar(11),
    company_name       varchar(255),
    contact_email      varchar(255),
    contact_person     varchar(255),
    contact_phone      varchar(255),
    municipality       varchar(255),
    province           varchar(255),
    sector             varchar(255),
    street_address     varchar(255),
    primary key (rev, supplier_id)
);

create table tokens
(
    invalidated   boolean       not null,
    suspended     boolean       not null,
    username      varchar(50)   not null,
    access_token  varchar(9999) not null,
    refresh_token varchar(9999) not null,
    code          varchar(255)  not null,
    primary key (code)
);

create table users
(
    active           boolean,
    birth_date       date,
    created_at       timestamp(6),
    updated_at       timestamp(6),
    user_id          bigint generated by default as identity,
    username         varchar(50),
    reference_points varchar(500),
    email            varchar(255),
    first_name       varchar(255),
    last_name        varchar(255),
    municipality     varchar(255) not null,
    nationality      varchar(255),
    password         varchar(255),
    phone_number     varchar(255),
    province         varchar(255) not null,
    sector           varchar(255) not null,
    street_address   varchar(255) not null,
    system_role      varchar(255) check (system_role in ('SYSTEM_ADMIN', 'MANAGER', 'USER', 'GUEST')),
    primary key (user_id),
    unique (username),
    unique (email)
);

create table users_log
(
    active               boolean,
    active_mod           boolean,
    birth_date           date,
    birth_date_mod       boolean,
    created_at_mod       boolean,
    email_mod            boolean,
    first_name_mod       boolean,
    last_name_mod        boolean,
    municipality_mod     boolean,
    nationality_mod      boolean,
    password_mod         boolean,
    phone_number_mod     boolean,
    province_mod         boolean,
    reference_points_mod boolean,
    rev                  integer not null,
    revtype              smallint,
    sector_mod           boolean,
    street_address_mod   boolean,
    system_role_mod      boolean,
    updated_at_mod       boolean,
    username_mod         boolean,
    created_at           timestamp(6),
    updated_at           timestamp(6),
    user_id              bigint  not null,
    reference_points     varchar(500),
    email                varchar(255),
    first_name           varchar(255),
    last_name            varchar(255),
    municipality         varchar(255),
    nationality          varchar(255),
    password             varchar(255),
    phone_number         varchar(255),
    province             varchar(255),
    sector               varchar(255),
    street_address       varchar(255),
    system_role          varchar(255) check (system_role in ('SYSTEM_ADMIN', 'MANAGER', 'USER', 'GUEST')),
    username             varchar(255),
    primary key (rev, user_id)
);

create table waiting_room
(
    arrival_time            timestamp(6) not null,
    client                  bigint       not null,
    completed_at            timestamp(6),
    consultation_started_at timestamp(6),
    id                      bigint generated by default as identity,
    pet                     bigint       not null,
    notes                   varchar(255),
    priority                varchar(255) not null check (priority in ('NORMAL', 'URGENTE', 'EMERGENCIA')),
    reason_for_visit        varchar(255),
    status                  varchar(255) not null check (status in ('ESPERANDO', 'EN_CONSULTA', 'COMPLETADO', 'CANCELADO')),
    primary key (id)
);

create table waiting_room_log
(
    arrival_time_mod            boolean,
    client_mod                  boolean,
    completed_at_mod            boolean,
    consultation_started_at_mod boolean,
    notes_mod                   boolean,
    pet_mod                     boolean,
    priority_mod                boolean,
    reason_for_visit_mod        boolean,
    rev                         integer not null,
    revtype                     smallint,
    status_mod                  boolean,
    arrival_time                timestamp(6),
    client                      bigint,
    completed_at                timestamp(6),
    consultation_started_at     timestamp(6),
    id                          bigint  not null,
    pet                         bigint,
    notes                       varchar(255),
    priority                    varchar(255) check (priority in ('NORMAL', 'URGENTE', 'EMERGENCIA')),
    reason_for_visit            varchar(255),
    status                      varchar(255) check (status in ('ESPERANDO', 'EN_CONSULTA', 'COMPLETADO', 'CANCELADO')),
    primary key (rev, id)
);

create table warehouses
(
    available_for_sale boolean,
    status             boolean      not null,
    id                 bigint generated by default as identity,
    name               varchar(50)  not null,
    warehouse_type     varchar(255) not null check (warehouse_type in ('PRINCIPAL', 'SECUNDARIO')),
    primary key (id)
);

create table warehouses_log
(
    available_for_sale     boolean,
    available_for_sale_mod boolean,
    name_mod               boolean,
    products_mod           boolean,
    rev                    integer not null,
    revtype                smallint,
    status                 boolean,
    status_mod             boolean,
    warehouse_type_mod     boolean,
    id                     bigint  not null,
    name                   varchar(50),
    warehouse_type         varchar(255) check (warehouse_type in ('PRINCIPAL', 'SECUNDARIO')),
    primary key (rev, id)
);

create index IDXobqq8jcniv7eqgtr3d6dij8my
    on invoices (issued_date);

create index IDXkoilk8qkqukefxtsd17wxruwl
    on invoices (payment_date);

create index IDXq11xedrmax65vyfuevlmuj2h8
    on invoices (status);

create index IDX270ikka7el7mi5ocy54s8ahsr
    on medical_histories (pet);

create index IDXde6eb2c0lybp2pc53g6dcucp8
    on payments (payment_date);

create index IDX9jrrbqwqavqj0h46ndebsooln
    on payments (method);

create index IDXh570cdj7423ffvxr2vulqkh3
    on payments (status);

create index IDX7nq3j9mbmotv8kv3nv9kbcb7c
    on tokens (username);

create index IDXjhr80jk1x6bj5a9ntyadphy1q
    on tokens (access_token);

create index IDX7myvscvtg39o98vb00njnvp7w
    on tokens (refresh_token);

alter table if exists appointments
    add constraint FK2nfdx8rbmibbksa4aq8rpgb5t
        foreign key (employee_id)
            references employee;

alter table if exists appointments
    add constraint FK21ahd1jev5nvuumq6rjg8eg1t
        foreign key (client_id)
            references client;

alter table if exists appointments
    add constraint FK62dl3dvwsbveq3vv067becwmj
        foreign key (pet_id)
            references pets;

alter table if exists appointments_log
    add constraint FKj90rylaxnwyiohsfu2xmaip6f
        foreign key (rev)
            references revision;

alter table if exists client
    add constraint FKmqxwjd2y48otpmr20m6odjdj9
        foreign key (client_id)
            references users;

alter table if exists client_log
    add constraint FKhc8qsplusdntqv09j74ifujy2
        foreign key (rev, client_id)
            references users_log;

alter table if exists consultations
    add constraint FK2klbeoayj3626onur7rhl3uhv
        foreign key (medical_history)
            references medical_histories;

alter table if exists consultations
    add constraint FK2pkrrnadplc1sxb45wwq8mff8
        foreign key (pet)
            references pets;

alter table if exists consultations
    add constraint FKpn5udnpi2fi2b1ptft6ylm8hk
        foreign key (veterinarian)
            references employee;

alter table if exists consultations_log
    add constraint FKbidrcugkvbds78ub7ivt5j4jg
        foreign key (rev)
            references revision;

alter table if exists employee
    add constraint FK7oa45fd2yfp32wxpx7s1ssllw
        foreign key (employee_id)
            references users;

alter table if exists employee_log
    add constraint FK4ducncdikjn32v8odyp8a7i5w
        foreign key (rev, employee_id)
            references users_log;

alter table if exists employee_work_schedule
    add constraint FKck7o5poc0s4p6joycwk87ywy
        foreign key (employee_id)
            references employee;

alter table if exists grooming_sessions
    add constraint FKb2aatvjgxqrqkyrlpsdndgdl1
        foreign key (groomer)
            references employee;

alter table if exists grooming_sessions
    add constraint FKnbvqnlivwksy2nlwmyjbm2pqo
        foreign key (pet)
            references pets;

alter table if exists grooming_sessions_log
    add constraint FKsvf3xtu3x5ivb23kx9dxy7dea
        foreign key (rev)
            references revision;

alter table if exists invoice_offerings
    add constraint FK75jl4spkqugr5y4y3h3irw8kg
        foreign key (invoice)
            references invoices;

alter table if exists invoice_offerings
    add constraint FKect21cf69leq5hpd243gp8qse
        foreign key (offering)
            references offerings;

alter table if exists invoice_offerings_log
    add constraint FKwra48p996uekcbw7a5dn5me7
        foreign key (rev)
            references revision;

alter table if exists invoice_product
    add constraint FKhvovdyepagtn9tfkik9bkrfd5
        foreign key (invoice)
            references invoices;

alter table if exists invoice_product
    add constraint FKagglsqw2oum9ifdgmauguv2e7
        foreign key (product)
            references products;

alter table if exists invoice_product_log
    add constraint FKt47997ya2n9owsreoghjrmbbd
        foreign key (rev)
            references revision;

alter table if exists invoices
    add constraint FKmasp3313l4cd635ipc1972eum
        foreign key (client)
            references client;

alter table if exists invoices
    add constraint FKa6x96jyd0b8xd1rlaqptj414t
        foreign key (consultation)
            references consultations;

alter table if exists invoices_log
    add constraint FKtqwargqw4a5wekr4nuq50mmgc
        foreign key (rev)
            references revision;

alter table if exists medical_histories
    add constraint FKi0eists62d7ofv0aocgiwt9ql
        foreign key (pet)
            references pets;

alter table if exists medical_histories_log
    add constraint FKestxejfc8m2atyyqg228h64dp
        foreign key (rev)
            references revision;

alter table if exists offerings_log
    add constraint FK8d95g1us025ojhujd1irm96n4
        foreign key (rev)
            references revision;

alter table if exists payments_detail
    add constraint FKm99sesvhy2381qvr1nvxm1n7c
        foreign key (invoice)
            references invoices;

alter table if exists payments_detail
    add constraint FKtrhl4sbn1iti2crpigd0u01q6
        foreign key (payment)
            references payments;

alter table if exists payments_detail_log
    add constraint FKr82grhl3rr1kn8xcqrko18qte
        foreign key (rev)
            references revision;

alter table if exists payments_log
    add constraint FK8t5lt6drf30iugmu01s1ieo3o
        foreign key (rev)
            references revision;

alter table if exists pet_owners
    add constraint FKf81y5ohv4mf6q7ns9t5ir7qvl
        foreign key (owners)
            references client;

alter table if exists pet_owners
    add constraint FKsvrtwtba03fykrdrjv78043rn
        foreign key (pet_id)
            references pets;

alter table if exists pet_owners_log
    add constraint FKfvurh3qf3excacwrq7p8vsrej
        foreign key (rev)
            references revision;

alter table if exists pets_log
    add constraint FK1c9vaxk5daoqyxk742h1blqao
        foreign key (rev)
            references revision;

alter table if exists products
    add constraint FK42ysdt57etvlvgyl61kx30p63
        foreign key (supplier)
            references suppliers;

alter table if exists products
    add constraint FK8px79mnafcw9t6hrvwv8xqwhw
        foreign key (warehouse)
            references warehouses;

alter table if exists products_log
    add constraint FKbkarpxag2ay59lstls419et6v
        foreign key (rev)
            references revision;

alter table if exists suppliers_log
    add constraint FK6gyecjx9w3169pe1ppqmwl9o8
        foreign key (rev)
            references revision;

alter table if exists users_log
    add constraint FKesjusbgn1jmfp1e7nmmqu9tgq
        foreign key (rev)
            references revision;

alter table if exists waiting_room
    add constraint FK6tu10j6iqpkrl4a4rhspep21r
        foreign key (client)
            references client;

alter table if exists waiting_room
    add constraint FK6tpr1te3wnfy0gf5a35oexvhe
        foreign key (pet)
            references pets;

alter table if exists waiting_room_log
    add constraint FKokhscugvadup6fs7nq074jb18
        foreign key (rev)
            references revision;

alter table if exists warehouses_log
    add constraint FKiqg7n8u0graxm2mjwfuslpalh
        foreign key (rev)
            references revision;


--  ██████╗  █████╗ ████████╗ █████╗       ─────▀▄▀─────▄─────▄
--  ██╔══██╗██╔══██╗╚══██╔══╝██╔══██╗      ──▄███████▄──▀██▄██▀
--  ██║  ██║███████║   ██║   ███████║      ▄█████▀█████▄──▄█
--  ██║  ██║██╔══██║   ██║   ██╔══██║      ███████▀████████▀
--  ██████╔╝██║  ██║   ██║   ██║  ██║      ─▄▄▄▄▄▄███████▀
--  ╚═════╝ ╚═╝  ╚═╝   ╚═╝   ╚═╝  ╚═╝

INSERT INTO users (username, password, email, first_name, last_name, phone_number, birth_date,
                   nationality, province, municipality, sector, street_address, reference_points,
                   active, created_at,
                   updated_at, system_role)
VALUES ('wornux', '$2a$10$rb2YK7DlCgaGOukZSq2LrOTZifJW7AN0ARthRrQLitPaofkTDozbS', 'app@wornux.com',
        'John', 'Doe', '8092223333', '1985-01-15',
        'Dominican', 'Santo Domingo', 'Distrito Nacional', 'Naco',
        'Calle Principal 123', 'Near the park',
        TRUE, NOW(), NOW(), 'SYSTEM_ADMIN')
